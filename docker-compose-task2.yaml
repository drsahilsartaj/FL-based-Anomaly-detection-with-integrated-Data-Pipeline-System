services:
    indbf_1:
      container_name: indbf_kafka_1
      image: registrylab.roc.cnam.fr/goyban/fladdps/ndbf:2.13-3.9.0
      env_file:
        - .env
      tty: true
      volumes:
        - ./NDBF/config:/app/confs
      command: ["bash", "/app/confs/run_broker.sh", "1", "i"]
      networks:
        dps_1_network:
          ipv4_address: ${KAFKA_i1_IP}

    endbf_1:
      container_name: endbf_kafka_1
      image: registrylab.roc.cnam.fr/goyban/fladdps/ndbf:2.13-3.9.0
      env_file:
        - .env
      tty: true
      volumes:
        - ./NDBF/config:/app/confs
      command: ["bash", "/app/confs/run_broker.sh", "1", "e"]
      networks:
        dps_1_network:
          ipv4_address: ${KAFKA_e1_IP}

    ndppf_1:
      container_name: ndppf_1
      build: 
        context: .
        dockerfile: ./NDPPF/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - endbf_1
        - indbf_1
      volumes:
        - ./NDPPF/config:/app/confs
      command: ["bash", "/app/confs/run_ndppf.sh", "1", "2", "3"]
      networks:
        dps_1_network:
          ipv4_address: ${NDPPF_1_IP}
          
    flclient-1:
      container_name: flclient-1
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flserver
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-1:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical
      command: ["bash", "/app/confs/run_client.sh", "1", "1"]
      networks:
        server_client_network:
          ipv4_address: ${CLIENT_1_SERVER_IP}
        dps_1_network:
          ipv4_address: ${CLIENT_1_DATASOURCE_IP}
      
    flclient-2:
      container_name: flclient-2
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flserver
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-2:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical/
      command: ["bash", "/app/confs/run_client.sh", "2", "1"]
      networks:
        server_client_network:
          ipv4_address: ${CLIENT_2_SERVER_IP}
        dps_1_network:
          ipv4_address: ${CLIENT_2_DATASOURCE_IP}
          
    flclient-3:
      container_name: flclient-3
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flserver
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-3:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical/
      command: ["bash", "/app/confs/run_client.sh", "3", "1"]
      networks:
        server_client_network:
          ipv4_address: ${CLIENT_3_SERVER_IP}
        dps_1_network:
          ipv4_address: ${CLIENT_3_DATASOURCE_IP}
      
          

    flinference-1:
      container_name: flinference-1
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flserver
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-1:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical
      command: ["bash", "/app/confs/run_inference.sh", "1","1"]
      networks: 
        server_client_network:
          ipv4_address: ${INFERENCE_1_SERVER_IP}
        dps_1_network:
          ipv4_address: ${INFERENCE_1_DATASOURCE_IP}
          
    flinference-2:
      container_name: flinference-2
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-2:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical/
      command: ["bash", "/app/confs/run_inference.sh", "2","1"]
      networks:
        server_client_network:
          ipv4_address: ${INFERENCE_2_SERVER_IP}
        dps_1_network:
          ipv4_address: ${INFERENCE_2_DATASOURCE_IP}
          
    flinference-3:
      container_name: flinference-3
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - ndppf_1
      volumes:
        - ./FLInstant/config:/app/confs
        - ./Output/flclient-3:/in_network_federaed_learning_for_anomaly_detection/Output/Analysis/physical/
      command: ["bash", "/app/confs/run_inference.sh", "3","1"]
      networks:
        server_client_network:
          ipv4_address: ${INFERENCE_3_SERVER_IP}
        dps_1_network:
          ipv4_address: ${INFERENCE_3_DATASOURCE_IP}
          
                    

    datasource-i1:
      container_name: datasource-i1
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "1", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I1_IP}

    datasource-i2:
      container_name: datasource-i2
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "2", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I2_IP}    

    datasource-i3:
      container_name: datasource-i3
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "3", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I3_IP}

    datasource-i4:
      container_name: datasource-i4
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
        
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "4", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I4_IP}
          
    datasource-i5:
      container_name: datasource-i5
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
        
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "5", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I5_IP}
          
    datasource-i6:
      container_name: datasource-i6
      build: 
        context: .
        dockerfile: ./DATASOURCE/Dockerfile
      env_file:
        - .env
      tty: true
      depends_on:
        - flclient-1
        - flclient-2
        - flclient-3
        
      #cpus: 1
      volumes:
        - ./DATASOURCE/config:/app/confs
      command: ["bash", "/app/confs/run_datasource_task2.sh", "6", "1"]
      networks:
        dps_1_network:
          ipv4_address: ${DATASOURCE_D1_I6_IP}
          
          
          

    flserver:
      container_name: flserver
      build: 
        context: .
        dockerfile: ./FLInstant/Dockerfile
      env_file:
        - .env
      tty: true
      volumes:
        - ./FLInstant/config:/app/confs
      command: ["bash", "/app/confs/run_server.sh"]
      networks:
        server_client_network:
          ipv4_address: ${SERVER_IP}

networks:
    server_client_network:
      driver: bridge
      ipam:
        config:
          - subnet: "${SERVER_CLIENT_NETWORK_SUBNET}" 
    dps_1_network:
      driver: bridge
      ipam:
        config:
          - subnet: "${DPS_1_NETWORK_SUBNET}" 